name: Expense-tracker ci-pipeline
on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
  pull_request:
    branches:
      - main
      - develop
      - release/*

jobs:
  unit-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: gradle

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build and run tests
        run: ./gradlew test --tests 'com.tutorialseu.expensetrackerbackend.service.unit.*'

  integration-testing:
    needs: [unit-testing]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.base_ref == 'develop' || startsWith(github.ref, 'refs/heads/release') || startsWith(github.base_ref, 'release/')
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - "5432:5432"
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'
          cache: gradle

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Run integration tests
        run: ./gradlew test --tests 'com.tutorialseu.expensetrackerbackend.service.integration.*'

  build-and-push:
    needs: integration-testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }} .

      - name: Tag Docker Image
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest